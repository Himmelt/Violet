apply plugin: 'java'

group = 'org.soraworld'
version = '2.4.0'

sourceCompatibility = targetCompatibility = 1.8

dependencies {
    compile 'org.soraworld:hocon:1.2.1'
    testCompile 'junit:junit:4.12'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    group rootProject.group
    version rootProject.version

    sourceCompatibility = targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    
    configurations {
        shadow
        compile.extendsFrom(shadow)
        shadeOnly
        compileOnly.extendsFrom(shadeOnly)
    }
    dependencies {
        shadeOnly rootProject
        shadow 'org.soraworld:hocon:1.2.1'
        testCompile 'junit:junit:4.12'
    }
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava, rootProject.sourceSets.main.allJava
    }
    javadoc {
        options.encoding = 'UTF-8'
        options.charSet = 'UTF-8'
        source = sourceSets.main.allJava
        source += rootProject.sourceSets.main.allJava
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    jar {
        configurations.shadeOnly.copyRecursive().setTransitive(false).each {
            artifact -> from(zipTree(artifact))
        }
    }
    task release(type: Jar, dependsOn: build) {
        classifier = 'shadow'
        from sourceSets.main.output, rootProject.sourceSets.main.output
        configurations.shadow.copyRecursive().setTransitive(false).each {
            artifact -> from(zipTree(artifact))
        }
    }
    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileJava.doFirst {
    replaceVersion()
}

void replaceVersion() {
    def violet = new File("src/main/java/org/soraworld/violet/Violet.java")
    def plugin = new File("SpigotViolet/src/main/resources/plugin.yml")

    def text = violet.newReader("UTF-8").text
    text = text.replaceAll("PLUGIN_VERSION = \"[0-9].[0-9].[0-9]\"", "PLUGIN_VERSION = \"" + rootProject.version.toString() + "\"")
    def writer = violet.newWriter("UTF-8")
    writer.write(text)
    writer.flush()
    writer.close()

    text = plugin.newReader("UTF-8").text
    text = text.replaceAll("version: [0-9].[0-9].[0-9]", "version: " + rootProject.version.toString())
    writer = plugin.newWriter("UTF-8")
    writer.write(text)
    writer.flush()
    writer.close()
}
