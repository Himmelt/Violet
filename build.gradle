import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'java'

group = 'org.soraworld'
version = getVioletVersion()

ext {
    _BINTRAY_KEY = System.getenv('BINTRAY_KEY') != null ? System.getenv('BINTRAY_KEY') : BINTRAY_KEY
    _BINTRAY_USER = System.getenv('BINTRAY_USER') != null ? System.getenv('BINTRAY_USER') : BINTRAY_USER
}

sourceCompatibility = targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile 'org.soraworld:hocon:1.2.1'
    testCompile 'junit:junit:4.12'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    group rootProject.group
    version rootProject.version

    sourceCompatibility = targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        jcenter()
    }

    configurations {
        shadow
        compile.extendsFrom(shadow)
        shadeOnly
        compileOnly.extendsFrom(shadeOnly)
    }

    dependencies {
        shadeOnly rootProject
        shadow 'org.soraworld:hocon:1.2.1'
        testCompile 'junit:junit:4.12'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava, rootProject.sourceSets.main.allJava
        includeEmptyDirs = false
        exclude 'net/minecraft/server', 'org/bukkit/craftbukkit'
    }
    javadoc {
        options.encoding = 'UTF-8'
        options.charSet = 'UTF-8'
        source = sourceSets.main.allJava
        source += rootProject.sourceSets.main.allJava
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
        includeEmptyDirs = false
        exclude 'net/minecraft/server', 'org/bukkit/craftbukkit'
    }
    jar {
        configurations.shadeOnly.copyRecursive().setTransitive(false).each {
            artifact -> from(zipTree(artifact))
        }
        includeEmptyDirs = false
        exclude 'net/minecraft/server', 'org/bukkit/craftbukkit'
    }
    task shadowJar(type: Jar) {
        classifier = 'shadow'
        from sourceSets.main.output, rootProject.sourceSets.main.output
        configurations.shadow.copyRecursive().setTransitive(false).each {
            artifact -> from(zipTree(artifact))
        }
        includeEmptyDirs = false
        exclude 'net/minecraft/server', 'org/bukkit/craftbukkit'
    }
    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
        archives shadowJar
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

static String getVioletVersion() {
    Pattern pattern1 = Pattern.compile("PLUGIN_VERSION = \"[0-9].[0-9].[0-9]\"")
    Pattern pattern2 = Pattern.compile("[0-9].[0-9].[0-9]")
    Matcher matcher1 = pattern1.matcher(new File("src/main/java/org/soraworld/violet/Violet.java").newReader("UTF-8").text)
    if (matcher1.find()) {
        Matcher matcher2 = pattern2.matcher(matcher1.group())
        if (matcher2.find()) return matcher2.group()
    }
    return "x.y.z"
}
