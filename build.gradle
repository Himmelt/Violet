apply plugin: 'java'

group = 'org.soraworld'
version = '2.5.0'

sourceCompatibility = targetCompatibility = 1.8

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    jcenter()
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

dependencies {
    compile 'org.soraworld:hocon:1.2.2-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'

    group rootProject.group
    version rootProject.version

    sourceCompatibility = targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        jcenter()
        maven { url 'https://repo.spongepowered.org/maven' }
        maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        maven { url 'https://hub.spigotmc.org/nexus/content/groups/public/' }
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    }

    configurations {
        shadow
        compile.extendsFrom(shadow)
        shadeOnly
        compileOnly.extendsFrom(shadeOnly)
    }

    dependencies {
        shadeOnly rootProject
        shadow 'org.soraworld:hocon:1.2.2-SNAPSHOT'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava, rootProject.sourceSets.main.allJava
        includeEmptyDirs = false
        exclude 'net/minecraft/server', 'org/bukkit/craftbukkit'
    }

    javadoc {
        options.encoding = 'UTF-8'
        options.charSet = 'UTF-8'
        source = sourceSets.main.allJava
        source += rootProject.sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
        includeEmptyDirs = false
        exclude 'net/minecraft/server', 'org/bukkit/craftbukkit'
    }

    jar {
        configurations.shadeOnly.copyRecursive().setTransitive(false).each {
            artifact -> from(zipTree(artifact))
        }
        includeEmptyDirs = false
    }

    task shadowJar(type: Jar) {
        classifier = 'shadow'
        from sourceSets.main.output, rootProject.sourceSets.main.output
        configurations.shadow.copyRecursive().setTransitive(false).each {
            artifact -> from(zipTree(artifact))
        }
        includeEmptyDirs = false
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
        archives shadowJar
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
